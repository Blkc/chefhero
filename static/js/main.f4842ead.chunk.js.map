{"version":3,"sources":["actions/index.js","reducers/index.js","components/Header.js","components/Filter.js","components/Table.js","containers/MainApp.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_ORDERS_SUCCESS","fetchOrderSuccess","orders","type","payload","reducers","combineReducers","state","action","reduce","o","order","id","suppliers","vendorName","Header","className","alt","src","Filter","selectedSupplier","setSelectedSupplier","useSelector","supplierOptions","Object","values","map","s","key","value","concat","onChange","e","target","so","onClick","Table","i","tagStyle","orderBuyerStatus","backgroundColor","style","toUpperCase","deliveryDay","moment","format","isBYOS","isPendingVendorOnboarding","total","renderRow","MainApp","original_orders","useState","setOrders","dispatch","useDispatch","a","fetch","then","res","json","data","useEffect","fetchOrders","length","updated_orders","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAAaA,EAAuB,uBAEvBC,EAAoB,SAACC,GAChC,MAAO,CACLC,KAAMH,EACNI,QAAS,CACPF,YCsBN,IAKeG,EALEC,YAAgB,CAC/BJ,OA1BF,WAAmC,IAAnBK,EAAkB,uDAAZ,GAAIC,EAAQ,uCAGhC,OAAQA,EAAOL,MACb,KAAKH,EAEH,OADSQ,EAAOJ,QAAQF,OACVO,QAAO,SAACC,EAAGC,GAAiC,OAArBD,EAAEC,EAAMC,IAAMD,EAAcD,IAAM,IACzE,QACE,OAAOH,IAmBXM,UAfF,WAAsC,IAAnBN,EAAkB,uDAAZ,GAAIC,EAAQ,uCAGnC,OAAQA,EAAOL,MACb,KAAKH,EAGH,OADSQ,EAAOJ,QAAQF,OACVO,QAAO,SAACC,EAAGC,GAAoD,OAAxCD,EAAEC,EAAMG,YAAcH,EAAMG,WAAmBJ,IAAM,IAC5F,QACE,OAAOH,M,iDCdEQ,EARA,WACb,OACE,qBAAKC,UAAU,SAAf,SACE,qBAAKC,IAAI,OAAOD,UAAU,OAAOE,IAAI,iFCF5B,SAASC,EAAT,GAA4D,IAA1CC,EAAyC,EAAzCA,iBAAkBC,EAAuB,EAAvBA,oBAC3CR,EAAYS,aAAY,SAAAf,GAAK,OAAKA,EAAMM,WAAa,MACvDU,EAAmBC,OAAOC,OAAOZ,GAAYa,KAAI,SAAAC,GACnD,MAAO,CAAEC,IAAKD,EAAGE,MAAOF,MAI1B,OAFAJ,EAAkB,CAAC,CAAEK,IAAK,MAAOC,MAAO,kBAAkBC,OAAOP,GAG/D,sBAAKP,UAAU,SAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,6CAAuB,uBACvB,wBAAQa,MAAOT,EAAkBW,SAAU,SAAAC,GAAC,OAAIX,EAAoBW,EAAEC,OAAOJ,QAA7E,SACGN,EAAgBG,KAAI,SAAAQ,GAAE,OACrB,wBAAqBL,MAAOK,EAAGN,IAA/B,SAAqCM,EAAGL,OAA3BK,EAAGN,aAItB,wBAAQZ,UAAU,eAAemB,QAAS,SAAAH,GAAC,OAAIX,EAAoB,QAAnE,qC,qBCdS,SAASe,EAAT,GAA4B,IAAXlC,EAAU,EAAVA,OA2C9B,OACE,kCACE,gCACE,qBAAIc,UAAU,eAAd,UACE,wCACA,8CACA,0CACA,4CAGJ,gCACGd,EAAOwB,KAAI,SAAChB,EAAG2B,GAAJ,OA5BlB,SAAmB1B,EAAO0B,GACxB,IAAMC,EAAsC,SAA3B3B,EAAM4B,iBAA8B,CAAEC,gBAAiB,WAAc,CAAEA,gBAAiB,WAEzG,OACE,qBAAYxB,UAAU,QAAtB,UACE,6BAAI,sBAAMA,UAAU,MAAMyB,MAAOH,EAA7B,UAAyC3B,EAAM4B,kBAAoB,IAAIG,kBAC3E,6BAAK/B,EAAMgC,YAAcC,IAAOjC,EAAMgC,YAAa,cAAcE,OAAO,iBAAmB,OAC3F,+BACGlC,EAAMG,WACLH,EAAMmC,OAAkD,KAAzC,sBAAM9B,UAAU,SAAhB,oBAChBL,EAAMoC,0BAA4B,sBAAM/B,UAAU,QAAhB,iBAAqC,QAE1E,6BAAKL,EAAMqC,OAASrC,EAAMqC,MAAQ,EAA7B,WAAqCrC,EAAMqC,OAAU,SARnDX,GAyBLY,CAAUvC,EAAG2B,W,MClDR,SAASa,IACtB,IAAMC,EAAkB7B,aAAY,SAAAf,GAAK,OAAKiB,OAAOC,OAAOlB,EAAML,SAAW,MAD7C,EAEJkD,mBAASD,GAFL,mBAEzBjD,EAFyB,KAEjBmD,EAFiB,OAGgBD,mBAAS,OAHzB,mBAGzBhC,EAHyB,KAGPC,EAHO,KAK1BiC,EAAWC,cALe,4CA0BhC,sBAAAC,EAAA,sEACQC,MAAM,wCACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJN,EAASrD,EAAkB2D,EAAKC,UAJtC,4CA1BgC,sBAkChC,OA3BAC,qBAAU,YAPsB,mCAQ9BC,KACC,IAEHD,qBAAU,YAEJ5D,EAAO8D,QAA+B,QAArB5C,GAA8B+B,EAAgBa,QACjEX,EAAUF,KAEX,CAACA,IAEJW,qBAAU,WACR,IAAIG,EAAc,YAAOd,GACD,QAArB/B,IACD6C,EAAiBd,EAAgBe,QAAO,SAAAxD,GAAC,OAAIA,EAAEI,aAAeM,MAEhEiC,EAAUY,KACT,CAAC7C,IAWF,gCACE,cAAC,EAAD,IACA,cAACD,EAAD,CAAQC,iBAAkBA,EAAkBC,oBAAqBA,IACjE,qBAAKL,UAAU,gBAAf,SACE,cAACoB,EAAD,CAAOlC,OAAQA,SCzCvB,IAAMiE,EAAQC,YACZ/D,EACAgE,OAAOC,8BAAgCD,OAAOC,gCAWjCC,MARf,WACE,OACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAACjB,EAAD,OCLSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f4842ead.chunk.js","sourcesContent":["export const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS'\n\nexport const fetchOrderSuccess = (orders) => {\n  return {\n    type: FETCH_ORDERS_SUCCESS,\n    payload: {\n      orders\n    }\n  }\n}","import { combineReducers } from 'redux'\nimport { FETCH_ORDERS_SUCCESS } from '../actions'\n\nfunction orders(state={}, action) {\n  let orders\n\n  switch (action.type) {\n    case FETCH_ORDERS_SUCCESS:\n      orders = action.payload.orders\n      return orders.reduce((o, order) => { o[order.id] = order; return o; }, {})\n    default:\n      return state\n  }\n}\n\nfunction suppliers(state={}, action) {\n  let orders\n\n  switch (action.type) {\n    case FETCH_ORDERS_SUCCESS:\n      //cannot find vendorId, assuming vendor name is unique\n      orders = action.payload.orders\n      return orders.reduce((o, order) => { o[order.vendorName] = order.vendorName; return o; }, {})\n    default:\n      return state\n  }\n}\n\nconst reducers = combineReducers({\n  orders,\n  suppliers\n})\n\nexport default reducers","import React from 'react'\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <img alt=\"logo\" className=\"logo\" src=\"https://order.chefhero.com/static/chefhero/images/chefhero_logo_white.png\" />\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport default function Filter({ selectedSupplier, setSelectedSupplier }) {\n  const suppliers = useSelector(state => (state.suppliers || []))\n  let supplierOptions = (Object.values(suppliers)).map(s => {\n    return { key: s, value: s }\n  })\n  supplierOptions = [{ key: 'all', value: 'All Suppliers'}].concat(supplierOptions)\n\n  return (\n    <div className=\"filter\">\n      <div className=\"select-wrapper\">\n        <label>Supplier</label><br/>\n        <select value={selectedSupplier} onChange={e => setSelectedSupplier(e.target.value)}>\n          {supplierOptions.map(so => \n            <option key={so.key} value={so.key}>{so.value}</option>\n          )}\n        </select>\n      </div>\n      <button className=\"reset-button\" onClick={e => setSelectedSupplier('all')}>&#10005; Reset Filters</button>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { fetchOrderSuccess } from '../actions'\n\nexport default function Table({ orders }) {\n  /* const original_orders = useSelector(state => (Object.values(state.orders) || []))\n  const [orders, setOrders] = useState(original_orders)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    fetchOrders()\n  }, [])\n\n  useEffect(() => {\n    let updated_orders = [...original_orders]\n    if(selectedSupplier !== 'all') {\n      updated_orders = original_orders.filter(o => o.vendorName === selectedSupplier)\n    }\n    setOrders(updated_orders)\n  }, [selectedSupplier])\n\n  async function fetchOrders() {\n    await fetch('https://chefhero.free.beeceptor.com/')\n      .then(res => res.json())\n      .then(json => {\n        dispatch(fetchOrderSuccess(json.data))\n      })\n  } */\n\n  function renderRow(order, i) {\n    const tagStyle = order.orderBuyerStatus === 'Paid' ? { backgroundColor: '#b0ddcb' } : { backgroundColor: '#c4c4ff' }\n\n    return (\n      <tr key={i} className=\"order\">\n        <td><span className=\"tag\" style={tagStyle}>{(order.orderBuyerStatus || '').toUpperCase()}</span></td>\n        <td>{order.deliveryDay ? moment(order.deliveryDay, 'YYYY-MM-DD').format('MMM. DD, YYYY') : null}</td>\n        <td>\n          {order.vendorName}\n          {!order.isBYOS ? <span className=\"market\">MARKET</span> : null} \n          {order.isPendingVendorOnboarding ? <span className=\"first\">1st</span> : null}\n        </td>\n        <td>{order.total && order.total > 0 ? `$${order.total}` : null}</td>\n      </tr>\n    )\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr className=\"table-header\">\n          <th>STATUS</th>\n          <th>DELIVERY DAY</th>\n          <th>SUPPLIER</th>\n          <th>TOTAL</th>\n        </tr>\n      </thead>\n      <tbody>\n        {orders.map((o, i) => \n          renderRow(o, i)\n        )}\n      </tbody>\n    </table>\n  )\n}","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Header from '../components/Header'\nimport Filter from '../components/Filter'\nimport Table from '../components/Table'\n\nimport { fetchOrderSuccess } from '../actions'\n\nimport '../App.css';\n\nexport default function MainApp() {\n  const original_orders = useSelector(state => (Object.values(state.orders) || []))\n  const [orders, setOrders] = useState(original_orders)\n  const [selectedSupplier, setSelectedSupplier] = useState('all')\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    fetchOrders()\n  }, [])\n\n  useEffect(() => {\n    //Handles initialization\n    if(!orders.length && selectedSupplier === 'all' && original_orders.length) {\n      setOrders(original_orders)\n    }\n  }, [original_orders])\n\n  useEffect(() => {\n    let updated_orders = [...original_orders]\n    if(selectedSupplier !== 'all') {\n      updated_orders = original_orders.filter(o => o.vendorName === selectedSupplier)\n    }\n    setOrders(updated_orders)\n  }, [selectedSupplier])\n\n  async function fetchOrders() {\n    await fetch('https://chefhero.free.beeceptor.com/')\n      .then(res => res.json())\n      .then(json => {\n        dispatch(fetchOrderSuccess(json.data))\n      })\n  }\n\n  return (\n    <div>\n      <Header />\n      <Filter selectedSupplier={selectedSupplier} setSelectedSupplier={setSelectedSupplier} />\n      <div className=\"table-wrapper\">\n        <Table orders={orders} />\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducers from './reducers'\n\nimport './App.scss'\n\nimport MainApp from './containers/MainApp'\n\nconst store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainApp />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}